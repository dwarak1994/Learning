- hosts: host01
  become: true
  tasks:
    - name: Install required packages
      apt: name={{item}} state=present update_cache=yes
      with_items:
        - nginx
        - mysql-server



- hosts: localhost
  tasks:
  - name: Ansible create multiple files example
    file: 
      path: "{{ item }}"
      state: touch
      mode: 0775
    with_items:
    - int1.txt
    - int2.txt
    - int3.txt
    - int4.txt



---
-
  name: Create file using inventory defined variable
  hosts: localhost
  tasks:
    -
      name: Create file using inventory defined variable
      command: touch '{{ file_name }}'

-
  name: Create file using inline variable
  hosts: localhost
  vars:
    file_name: 'test2'
  tasks:
    -
      name: Create file using inline variable
      command: touch '{{ file_name }}'

-
  name: Create file using variable file
  hosts: localhost
  vars_files:
            - variables.yml
  tasks:
    -
      name: Create file using variable file
      command: touch '{{ file_name }}'


commands
ansible group1 -i myhosts -m command -a date
ansible group1 -i "inventory" -m "module" -a "module-argument"




---
- hosts: host01
  become: true ##this makes as sudo user
  tasks:
    - name: ensure latest sysstat is installed
      apt:
        name: sysstat
        state: latest

ansible-doc apt ##to see the documentation

- hosts: all
  tasks:
    - name: "Ping to test connection"
      ping:
-
  name: Install and clone git repository on host01
  hosts: host01
  tasks:

    - name: Install Git
      apt: name=git state=present

    - name: Clone Git Repository
      git:
        repo: https://github.com/mmumshad/simple-webapp-color.git
        dest: demo/ansible/git


- local_action:
    module: ec2_elb_lb
    name: "test-please-delete"
    state: present
    zones:
      - us-east-1a
      - us-east-1d
    listeners:
      - protocol: http # options are http, https, ssl, tcp
        load_balancer_port: 80
        instance_port: 80
        proxy_protocol: True
      - protocol: https
        load_balancer_port: 443
        instance_protocol: http # optional, defaults to value of protocol setting
        instance_port: 80
        # ssl certificate required for https or ssl
        ssl_certificate_id: "arn:aws:iam::123456789012:server-certificate/company/servercerts/ProdServerCert"


- ec2:
    key_name: mykey
    group: databases
    instance_type: t2.micro
    image: ami-123456
    wait: yes
    wait_timeout: 500
    count: 5
    instance_tags:
       db: postgres
    monitoring: yes
    vpc_subnet_id: subnet-29e63245
    assign_public_ip: yes


# Launch instances, runs some tasks
# and then terminate them

- name: Create a sandbox instance
  hosts: localhost
  gather_facts: False
  vars:
    keypair: my_keypair
    instance_type: m1.small
    security_group: my_securitygroup
    image: my_ami_id
    region: us-east-1
  tasks:
    - name: Launch instance
      ec2:
         key_name: "{{ keypair }}"
         group: "{{ security_group }}"
         instance_type: "{{ instance_type }}"
         image: "{{ image }}"
         wait: true
         region: "{{ region }}"
         vpc_subnet_id: subnet-29e63245
         assign_public_ip: yes
      register: ec2

    - name: Add new instance to host group
      add_host:
        hostname: "{{ item.public_ip }}"
        groupname: launched
      with_items: "{{ ec2.instances }}"

    - name: Wait for SSH to come up
      delegate_to: "{{ item.public_dns_name }}"
      wait_for_connection:
        delay: 60
        timeout: 320
      with_items: "{{ ec2.instances }}"

- name: Configure instance(s)
  hosts: launched
  become: True
  gather_facts: True
  roles:
    - my_awesome_role
    - my_awesome_test

- name: Terminate instances
  hosts: localhost
  connection: local
  tasks:
    - name: Terminate instances that were previously launched
      ec2:
        state: 'absent'
        ins
tance_ids: '{{ ec2.instance_ids }}'

POST
curl -d "param1=value1&param2=value2" -X POST http://localhost:3000/data
curl -d "param1=value1&param2=value2" -H "Content-Type: application/x-www-form-urlencoded" -X POST http://localhost:3000/data
curl -d '{"key1":"value1", "key2":"value2"}' -H "Content-Type: application/json" -X POST http://localhost:3000/data
get
curl https://curl.haxx.se

